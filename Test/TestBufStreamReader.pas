unit TestBufStreamReader;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, CustomTestCase, System.Classes, BufStreamReader, System.SysUtils, BufStream;

type
  // Test methods for class BufferedStreamReader

  TestBufferedStreamReaderBase = class(TCustomTestCase)
  strict private
    FLine1: string;
    FLine2: string;
    FLine3: string;
    FBufferedStreamReader: BufferedStreamReader;
  protected
    procedure CreateTestStreamReader(const BufferSize: integer);
  public
    procedure TearDown; override;
  published
    procedure TestReadChars;
    procedure TestReadLine;
    procedure TestReadUntilByte;
    procedure TestReadUntilString;
    procedure TestReadToEnd;
    procedure TestReadStreamAfter;
    procedure TestPeek;
  end;

  TestBufferedStreamReaderSmallBuffer = class(TestBufferedStreamReaderBase)
  public
    procedure SetUp; override;
  end;

  TestBufferedStreamReaderLargeBuffer = class(TestBufferedStreamReaderBase)
  public
    procedure SetUp; override;
  end;

implementation

procedure TestBufferedStreamReaderBase.CreateTestStreamReader(const BufferSize: integer);
var
  data: TBytes;
  bs: TBytesStream;
  src: BufferedStream;
begin
  FLine1 := 'This is a test';
  FLine2 := 'Это тест';
  FLine3 := '0123456789';

  data := TEncoding.UTF8.GetBytes(
    FLine1 + #13#10 +
    FLine2 + #13#10 +
    FLine3);
  bs := TBytesStream.Create(data);
  src := BufferedStream.Create(bs, [BufferedStreamOwnsSource], BufferSize);
  FBufferedStreamReader := BufferedStreamReader.Create(src, TEncoding.UTF8, [BufferedStreamReaderOwnsSource]);
end;

procedure TestBufferedStreamReaderBase.TearDown;
begin
  FBufferedStreamReader.Free;
  FBufferedStreamReader := nil;
end;

procedure TestBufferedStreamReaderBase.TestPeek;
var
  c: Char;
  ReturnValue: integer;
  Src: TBytes;
begin
  FBufferedStreamReader.ReadLine;
  FBufferedStreamReader.ReadLine;

  Src := TEncoding.UTF8.GetBytes(FLine3);

  ReturnValue := FBufferedStreamReader.Peek;

  CheckEquals(Src[0], ReturnValue, 'Peek failed (1st)');
  CheckFalse(FBufferedStreamReader.EndOfStream, 'Peek incorrectly flagged end of stream');

  FBufferedStreamReader.ReadUntil('8');
  ReturnValue := FBufferedStreamReader.Peek;

  CheckEquals(Src[9], ReturnValue, 'Peek failed (2nd)');
  CheckFalse(FBufferedStreamReader.EndOfStream, 'Peek incorrectly flagged end of stream');

  c := FBufferedStreamReader.ReadChars(1)[0];
  CheckEquals('9', c, 'ReadChars after Peek failed');

  ReturnValue := FBufferedStreamReader.Peek;
  CheckEquals(-1, ReturnValue, 'Peek failed to signal End Of Stream');
  CheckTrue(FBufferedStreamReader.EndOfStream, 'Peek failed to flag end of stream');
end;

procedure TestBufferedStreamReaderBase.TestReadChars;
var
  ReturnValue: TCharArray;
  CharCount: Integer;
begin
  CharCount := 1;
  ReturnValue := FBufferedStreamReader.ReadChars(CharCount);
  CheckEquals(FLine1.ToCharArray(0, CharCount), ReturnValue, 'ReadChars failed on first line');

  FBufferedStreamReader.ReadLine;

  CharCount := 2;
  ReturnValue := FBufferedStreamReader.ReadChars(CharCount);
  CheckEquals(FLine2.ToCharArray(0, CharCount), ReturnValue, 'ReadChars failed on second line');

  FBufferedStreamReader.ReadLine;

  CharCount := 3;
  ReturnValue := FBufferedStreamReader.ReadChars(CharCount);
  CheckEquals(FLine3.ToCharArray(0, CharCount), ReturnValue, 'ReadChars failed on third line');
end;

procedure TestBufferedStreamReaderBase.TestReadLine;
var
  ReturnValue: string;
begin
  ReturnValue := FBufferedStreamReader.ReadLine;
  CheckEquals(FLine1, ReturnValue, 'ReadLine failed on first line');
  CheckFalse(FBufferedStreamReader.EndOfStream, 'ReadLine prematurely signaled end of stream on first line');

  ReturnValue := FBufferedStreamReader.ReadLine;
  CheckEquals(FLine2, ReturnValue, 'ReadLine failed on second line');
  CheckFalse(FBufferedStreamReader.EndOfStream, 'ReadLine prematurely signaled end of stream on second line');

  ReturnValue := FBufferedStreamReader.ReadLine;
  CheckEquals(FLine3, ReturnValue, 'ReadLine failed on third line');
  CheckTrue(FBufferedStreamReader.EndOfStream, 'ReadLine failed to signaled end of stream on third line');
end;

procedure TestBufferedStreamReaderBase.TestReadStreamAfter;
var
  Src: TBytes;
  Buffer: TBytes;
  readBytes: integer;
  ReturnValue: string;
begin
  FBufferedStreamReader.ReadLine;

  Src := TEncoding.UTF8.GetBytes(FLine2);
  SetLength(Buffer, Length(Src));

  readBytes := FBufferedStreamReader.Stream.Read(Buffer, 0, Length(Src));

  CheckEquals(Length(Src), readBytes, 'Stream read failed to read requested data');

  CheckEqualsMem(Src, Buffer, Length(Src), 'Stream read read wrong data');

  ReturnValue := FBufferedStreamReader.ReadLine;
  CheckEquals('', ReturnValue, 'ReadLine after Stream read failed (1st)');

  ReturnValue := FBufferedStreamReader.ReadLine;
  CheckEquals(FLine3, ReturnValue, 'ReadLine after Stream read failed (2nd)');
end;

procedure TestBufferedStreamReaderBase.TestReadUntilByte;
var
  ReturnValue: string;
  Delimiter: Byte;
begin
  Delimiter := 10;
  ReturnValue := FBufferedStreamReader.ReadUntil(Delimiter);

  CheckEquals(FLine1 + #13, ReturnValue);
  CheckFalse(FBufferedStreamReader.EndOfStream, 'ReadUntil incorrectly flagged end of stream');

  Delimiter := 13;
  ReturnValue := FBufferedStreamReader.ReadUntil(Delimiter);

  CheckEquals(FLine2, ReturnValue);
  CheckFalse(FBufferedStreamReader.EndOfStream, 'ReadUntil incorrectly flagged end of stream');

  ReturnValue := FBufferedStreamReader.ReadUntil(Delimiter);
  CheckEquals(#10 + FLine3, ReturnValue);
  CheckTrue(FBufferedStreamReader.EndOfStream, 'ReadUntil failed to flag end of stream');
end;

procedure TestBufferedStreamReaderBase.TestReadUntilString;
var
  ReturnValue: string;
  Delimiter: string;
begin
  Delimiter := FLine2.Substring(3, 2);
  ReturnValue := FBufferedStreamReader.ReadUntil(Delimiter);

  CheckEquals(FLine1 + #13#10 + FLine2.Substring(0, 3), ReturnValue);
  CheckFalse(FBufferedStreamReader.EndOfStream, 'ReadUntil incorrectly flagged end of stream');

  Delimiter := #13#10;
  ReturnValue := FBufferedStreamReader.ReadUntil(Delimiter);

  CheckEquals(FLine2.Substring(5, 3), ReturnValue);
  CheckFalse(FBufferedStreamReader.EndOfStream, 'ReadUntil incorrectly flagged end of stream');

  Delimiter := FLine3.Substring(0, 5);
  ReturnValue := FBufferedStreamReader.ReadUntil(Delimiter);

  CheckEquals('', ReturnValue);
  CheckFalse(FBufferedStreamReader.EndOfStream, 'ReadUntil incorrectly flagged end of stream');

  ReturnValue := FBufferedStreamReader.ReadUntil(Delimiter);
  CheckEquals(FLine3.Substring(5, 5), ReturnValue);
  CheckTrue(FBufferedStreamReader.EndOfStream, 'ReadUntil failed to flag end of stream');
end;

procedure TestBufferedStreamReaderBase.TestReadToEnd;
var
  ReturnValue: string;
begin
  FBufferedStreamReader.ReadLine;

  ReturnValue := FBufferedStreamReader.ReadToEnd;

  CheckEquals(FLine2 + #13#10 + FLine3, ReturnValue, 'ReadToEnd failed');
  CheckTrue(FBufferedStreamReader.EndOfStream, 'ReadToEnd failed to flag end of stream');
end;

{ TestBufferedStreamReaderSmallBuffer }

procedure TestBufferedStreamReaderSmallBuffer.SetUp;
begin
  CreateTestStreamReader(3);
end;

{ TestBufferedStreamReaderLargeBuffer }

procedure TestBufferedStreamReaderLargeBuffer.SetUp;
begin
  CreateTestStreamReader(4096);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestBufferedStreamReaderSmallBuffer.Suite);
  RegisterTest(TestBufferedStreamReaderLargeBuffer.Suite);
end.

